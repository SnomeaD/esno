#!/usr/bin/env node
'use strict';
const rp = require('request-promise');
const config = require('../config/config.js');
const regionListData = ['eu', 'us'];
const constRegion = regionListData[Math.floor(Math.random() * regionListData.length)];

const blizzard = require('blizzard.js').initialize({
    key: config.bnet.key,
    secret: config.bnet.secret,
    origin: constRegion,
});
const connectedRealmId = {
    'eu': [509, 510, 512, 516, 531, 535, 567, 568, 570, 578, 579, 580, 581, 604, 612, 633, 639, 1080, 1081, 1082, 1084, 1085, 1086, 1091, 1092, 1096, 1097, 1098, 1099, 1104, 1105, 1106, 1118, 1121, 1122, 1123, 1127, 1300, 1301, 1302, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1316, 1317, 1325, 1327, 1329, 1331, 1335, 1336, 1378, 1379, 1381, 1384, 1385, 1388, 1389, 1390, 1393, 1396, 1400, 1401, 1402, 1403, 1405, 1406, 1407, 1408, 1416, 1417, 1587, 1588, 1596, 1597, 1598, 1602, 1603, 1604, 1605, 1607, 1609, 1612, 1614, 1615, 1618, 1621, 1623, 1624, 1625, 1922, 1923, 1924, 1925, 1927, 1928, 1929, 2073, 2074, 3391, 3656, 3657, 3660, 3666, 3674, 3679, 3680, 3681, 3682, 3686, 3687, 3690, 3691, 3692, 3696, 3702, 3703, 3713, 3714],
    'us': [4, 5, 7, 9, 10, 11, 12, 47, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 90, 91, 96, 98, 99, 100, 101, 104, 105, 106, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 131, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 1069, 1070, 1071, 1072, 1129, 1136, 1138, 1146, 1147, 1151, 1165, 1168, 1169, 1171, 1173, 1174, 1175, 1182, 1184, 1185, 1190, 1425, 1426, 1427, 1428, 3207, 3208, 3209, 3234, 3661, 3675, 3676, 3677, 3678, 3683, 3684, 3685, 3693, 3694, 3721, 3722, 3723, 3724, 3725, 3726, 3728, 3729],
}
const constRealm = connectedRealmId[constRegion][Math.floor(Math.random() * connectedRealmId[constRegion].length)];

const tumblr = require('tumblr.js');

/* GET toon. */

const getToonFashion = function (theToken) {
    const constToken = theToken;
    const classesData = [
        { "name": "Warrior", "cssClass": "warrior", "armor": "Plate" },
        { "name": "Paladin", "cssClass": "paladin", "armor": "Plate" },
        { "name": "Hunter", "cssClass": "hunter", "armor": "Mail" },
        { "name": "Rogue", "cssClass": "rogue", "armor": "Leather" },
        { "name": "Priest", "cssClass": "priest", "armor": "Cloth" },
        { "name": "Death Knight", "cssClass": "death-knight", "armor": "Plate" },
        { "name": "Shaman", "cssClass": "shaman", "armor": "Mail" },
        { "name": "Mage", "cssClass": "mage", "armor": "Cloth" },
        { "name": "Warlock", "cssClass": "warlock", "armor": "Cloth" },
        { "name": "Monk", "cssClass": "monk", "armor": "Leather" },
        { "name": "Druid", "cssClass": "druid", "armor": "Leather" },
        { "name": "Demon Hunter", "cssClass": "demon-hunter", "armor": "Leather" }
    ];
    const qualityData = [
        { 'name': 'Poor', 'cssName': 'poor' },
        { 'name': 'Common', 'cssName': 'common' },
        { 'name': 'Uncommon', 'cssName': 'uncommon' },
        { 'name': 'Rare', 'cssName': 'rare' },
        { 'name': 'Epic', 'cssName': 'epic' },
        { 'name': 'Legendary', 'cssName': 'legendary' },
        { 'name': 'Artifact', 'cssName': 'artifact' },
        { 'name': 'Heirloom', 'cssName': 'heirloom' },
        { 'name': 'Wow token', 'cssName': 'wow_token' }
    ];
    const racesData = [
        { "id": 1, "mask": 1, "side": "Alliance", "name": "Human" },
        { "id": 2, "mask": 2, "side": "Horde", "name": "Orc" },
        { "id": 3, "mask": 4, "side": "Alliance", "name": "Dwarf" },
        { "id": 4, "mask": 8, "side": "Alliance", "name": "Night Elf" },
        { "id": 5, "mask": 16, "side": "Horde", "name": "Undead" },
        { "id": 6, "mask": 32, "side": "Horde", "name": "Tauren" },
        { "id": 7, "mask": 64, "side": "Alliance", "name": "Gnome" },
        { "id": 8, "mask": 128, "side": "Horde", "name": "Troll" },
        { "id": 9, "mask": 256, "side": "Horde", "name": "Goblin" },
        { "id": 10, "mask": 512, "side": "Horde", "name": "Blood Elf" },
        { "id": 11, "mask": 1024, "side": "Alliance", "name": "Draenei" },
        { "id": 22, "mask": 2097152, "side": "Alliance", "name": "Worgen" },
        { "id": 24, "mask": 8388608, "side": "neutral", "name": "Pandaren" },
        { "id": 25, "mask": 16777216, "side": "Alliance", "name": "Pandaren" },
        { "id": 26, "mask": 33554432, "side": "Horde", "name": "Pandaren" },
        { "id": 27, "mask": 67108864, "side": "horde", "name": "Nightborne" },
        { "id": 28, "mask": 134217728, "side": "horde", "name": "Highmountain Tauren" },
        { "id": 29, "mask": 268435456, "side": "alliance", "name": "Void Elf" },
        { "id": 30, "mask": 536870912, "side": "alliance", "name": "Lightforged Draenei" },
        { "id": 31, "mask": 1073741824, "side": "horde", "name": "Zandalari Troll" },
        { "id": 32, "mask": -2147483648, "side": "alliance", "name": "Kul Tiran" },
        { "id": 34, "mask": 2, "side": "alliance", "name": "Dark Iron Dwarf" },
        { "id": 36, "mask": 8, "side": "horde", "name": "Mag'har Orc" }
    ];

    function getRaceData(id) {
        for (let race in racesData) {
            if (racesData[race].id == id) {
                return racesData[race];
            }
        }
        return null;
    }
    function getTransmogCount(items) {
        let count = 0;
        for (let itemName in items) {
            if (items[itemName].hasOwnProperty('appearance') && items[itemName].appearance.hasOwnProperty('itemId')) {
                count++;
            }
        }
        return count;
    }
    function listItems(items) {
        let listItems = [];
        for (let itemSlot in items) {
            if (items[itemSlot].hasOwnProperty('appearance') && items[itemSlot].appearance.hasOwnProperty('itemId')) {
                listItems.push({
                    slot: itemSlot,
                    itemId: items[itemSlot].appearance.itemId,
                    transmog: true,
                });
            } else if (items[itemSlot].hasOwnProperty('id')) {
                listItems.push({
                    slot: itemSlot,
                    itemId: items[itemSlot].id,
                    transmog: false,
                });
            }
        }
        return listItems;
    }
    function validateTransmog(toon) {
        const transmogItem = getTransmogCount(toon.items);
        if (transmogItem < 3) {
            return {
                status: 'nok',
                reason: toon.name + ' - not enough transmogrified items (' + transmogItem + ')'
            };
        }
        return { status: 'ok' };
    }
    function getToonFromGuild(members, retry) {
        const toon = members[Math.floor(Math.random() * members.length)].character;
        if (toon.level != 120) {
            console.log('2-#' + retry + ' ' + toon.name + '-' + toon.realm + ' - not max level');
            return false
        } else {
            return toon;
        }
    };
    function getToon(name, realm) {
        console.log('GetToon: ' + realm + '-' + name);
        return blizzard.wow.character(['statistics', 'guild', 'items'], { realm: realm, name: name, origin: constRegion, token: constToken })
            .then(toon => {
                if (toon.data.hasOwnProperty('guild') && toon.data.guild.hasOwnProperty('name') && toon.data.guild.hasOwnProperty('realm')) {
                    console.log('Get guild: ' + toon.data.guild.realm + ' - ' + toon.data.guild.name);
                    return blizzard.wow.guild(['members'], { realm: toon.data.guild.realm, name: toon.data.guild.name, origin: constRegion, token: constToken })
                        .then(guild => {
                            let retries = 10;
                            let toon = false;
                            while (retries-- > 0 && !(toon = getToonFromGuild(guild.data.members, retries))) { };
                            return blizzard.wow.character(['statistics', 'guild', 'items'], { realm: toon.realm, name: toon.name, origin: constRegion, token: constToken })
                                .then(fashion => {
                                    if (fashion.response && fashion.response.data && fashion.response.data.status && fashion.response.data.status != 200) {
                                        throw 'Error: ' + fashion.response.data.reason;
                                    }
                                    const isToonValid = validateTransmog(fashion.data);
                                    if (isToonValid.status === 'nok') {
                                        throw isToonValid.reason;
                                    }
                                    console.log('Valid toon: ' + fashion.data.name);
                                    return {
                                        'status': 'ok',
                                        'name': fashion.data.name,
                                        'class': classesData[fashion.data.class - 1],
                                        'realm': fashion.data.realm,
                                        'region': constRegion,
                                        'race': getRaceData(fashion.data.race).name,
                                        'side': getRaceData(fashion.data.race).side,
                                        'guild': fashion.data.guild.name,
                                        'transmogItems': listItems(fashion.data.items),
                                        'thumbnail': 'https://render-api-' + constRegion + '.worldofwarcraft.com/static-render/' + constRegion + '/' + fashion.data.thumbnail,
                                        'render': 'http://render-' + constRegion + '.worldofwarcraft.com/character/' + fashion.data.thumbnail.substring(0, (fashion.data.thumbnail.length - 11)) + '-main.jpg',
                                        'link': 'http://' + constRegion + '.battle.net/wow/en/character/' + fashion.data.realm + '/' + fashion.data.name + '/advanced',
                                    };
                                });
                        });
                } else {
                    throw 'No guild';
                }
            })
    };
    function getValidToon(leadingGroups, retry) {
        const rowNumber = Math.floor(Math.random() * leadingGroups.length);
        const memberNumber = leadingGroups[rowNumber] && leadingGroups[rowNumber].members && Math.floor(Math.random() * leadingGroups[rowNumber].members.length);
        const name = leadingGroups[rowNumber].members[memberNumber].profile.name;
        const realm = leadingGroups[rowNumber].members[memberNumber].profile.realm.slug
        console.log('1-#' + retry + ' toon: ' + constRegion + '-' + realm + '-' + name);

        return getToon(name, realm).then(response => { return response }).catch(error => {
            console.log('Invalid toon:' + error);
            if (retry > 0) {
                return getValidToon(leadingGroups, retry - 1);
            } else {
                throw 'Max retry hit, no valid toons';
            }
        });
    };

    return blizzard.wow.mythicKeystoneLeaderboard({ realm: constRealm, region: constRegion, token: constToken })
        .then(response => {
            const leaderBoards = response.data.current_leaderboards;
            const leaderBoard = leaderBoards[Math.floor(Math.random() * leaderBoards.length)];
            const period = leaderBoard.key.href.match(/period\/([0-9]*)/gm)[0].substring(7);
            const dungeon = leaderBoard.id;
            console.log(dungeon, period);
            return blizzard.wow.mythicKeystoneLeaderboard({ realm: constRealm, region: constRegion, dungeon: dungeon, period: period, token: constToken })
                .then(response => {
                    return getValidToon(response.data.leading_groups, 5)
                        .then(toonData => {
                            return Promise.all(toonData.transmogItems.map(function (item) {
                                return blizzard.wow.item({ id: item.itemId, origin: 'eu', locale: 'en_GB', token: constToken }).then(itemData => {
                                    item.name = itemData.data.name;
                                    item.quality = qualityData[itemData.data.quality];
                                    item.icon = itemData.data.icon;
                                    return item;
                                });
                            })).then(transmogItems => {
                                toonData.transmogItems = transmogItems;
                                return toonData;
                            });
                        });
                })
                .then(result => { return result; })
                .catch(error => {
                    if (error.response && error.response.data) {
                        console.log('error:', error.response.data);
                        console.log(error.response.data.status + ': ' + error.response.data.reason);
                    } else {
                        console.log(error);
                    }
                    throw 'unable to find a valid toon';
                });
        });
};
blizzard.getApplicationToken({
    key: config.bnet.key,
    secret: config.bnet.secret,
    origin: "us"
}).then(response => {
    const theToken = response.data.access_token;
    getToonFashion(theToken).then(result => {
        let items = '';
        result.transmogItems && result.transmogItems.forEach(function (item) {
            items += '<span class="slot">' + item.slot + ': </span><span class="' + item.quality.cssName + ' transmog_' + item.transmog + '"><a href="http://www.wowhead.com/item=' + item.itemId + '">' + item.name + '</a></span><br />';
        });

        const blogId = 'transmogwow.tumblr.com';
        const options = {
            type: 'photo',
            source: result.render,
            tags: result.race + ',' + result.class.name + ',' + result.class.armor + ',' + result.side + ',WoW,Transmogrification',
            caption: '<a class="' + result.class.cssClass + '" href="' + result.link + '">' + result.name + ' - ' + result.realm + ' (' + result.region + ')</a><br />' + items,
            link: result.link,
        };
        const client = tumblr.createClient(config.tumblr);
        client.returnPromises();
        client.createPhotoPost(blogId, options).then(result => {
            console.log('createPhotoPost promise success');
        });
    }).catch(error => {
        console.log(error);
        console.log('unable to find a valid toon');
    });
});
